// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -self_package=/home/melledev/src/github.com/MelleKoning/ai-chat/internal/genaimodel -destination=mockinterface.go
//

// Package mock_genaimodel is a generated GoMock package.
package genaimodel

import (
	context "context"
	io "io"
	iter "iter"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	genai "google.golang.org/genai"
)

// MockChatSessionAPI is a mock of ChatSessionAPI interface.
type MockChatSessionAPI struct {
	ctrl     *gomock.Controller
	recorder *MockChatSessionAPIMockRecorder
	isgomock struct{}
}

// MockChatSessionAPIMockRecorder is the mock recorder for MockChatSessionAPI.
type MockChatSessionAPIMockRecorder struct {
	mock *MockChatSessionAPI
}

// NewMockChatSessionAPI creates a new mock instance.
func NewMockChatSessionAPI(ctrl *gomock.Controller) *MockChatSessionAPI {
	mock := &MockChatSessionAPI{ctrl: ctrl}
	mock.recorder = &MockChatSessionAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatSessionAPI) EXPECT() *MockChatSessionAPIMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockChatSessionAPI) SendMessage(ctx context.Context, parts ...genai.Part) (*genai.GenerateContentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range parts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendMessage", varargs...)
	ret0, _ := ret[0].(*genai.GenerateContentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockChatSessionAPIMockRecorder) SendMessage(ctx any, parts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, parts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockChatSessionAPI)(nil).SendMessage), varargs...)
}

// SendMessageStream mocks base method.
func (m *MockChatSessionAPI) SendMessageStream(ctx context.Context, parts ...genai.Part) iter.Seq2[*genai.GenerateContentResponse, error] {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range parts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendMessageStream", varargs...)
	ret0, _ := ret[0].(iter.Seq2[*genai.GenerateContentResponse, error])
	return ret0
}

// SendMessageStream indicates an expected call of SendMessageStream.
func (mr *MockChatSessionAPIMockRecorder) SendMessageStream(ctx any, parts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, parts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageStream", reflect.TypeOf((*MockChatSessionAPI)(nil).SendMessageStream), varargs...)
}

// MockChatCreateServiceAPI is a mock of ChatCreateServiceAPI interface.
type MockChatCreateServiceAPI struct {
	ctrl     *gomock.Controller
	recorder *MockChatCreateServiceAPIMockRecorder
	isgomock struct{}
}

// MockChatCreateServiceAPIMockRecorder is the mock recorder for MockChatCreateServiceAPI.
type MockChatCreateServiceAPIMockRecorder struct {
	mock *MockChatCreateServiceAPI
}

// NewMockChatCreateServiceAPI creates a new mock instance.
func NewMockChatCreateServiceAPI(ctrl *gomock.Controller) *MockChatCreateServiceAPI {
	mock := &MockChatCreateServiceAPI{ctrl: ctrl}
	mock.recorder = &MockChatCreateServiceAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatCreateServiceAPI) EXPECT() *MockChatCreateServiceAPIMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockChatCreateServiceAPI) Create(ctx context.Context, model string, config *genai.GenerateContentConfig, history []*genai.Content) (ChatSessionAPI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, model, config, history)
	ret0, _ := ret[0].(ChatSessionAPI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockChatCreateServiceAPIMockRecorder) Create(ctx, model, config, history any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockChatCreateServiceAPI)(nil).Create), ctx, model, config, history)
}

// MockModelServiceAPI is a mock of ModelServiceAPI interface.
type MockModelServiceAPI struct {
	ctrl     *gomock.Controller
	recorder *MockModelServiceAPIMockRecorder
	isgomock struct{}
}

// MockModelServiceAPIMockRecorder is the mock recorder for MockModelServiceAPI.
type MockModelServiceAPIMockRecorder struct {
	mock *MockModelServiceAPI
}

// NewMockModelServiceAPI creates a new mock instance.
func NewMockModelServiceAPI(ctrl *gomock.Controller) *MockModelServiceAPI {
	mock := &MockModelServiceAPI{ctrl: ctrl}
	mock.recorder = &MockModelServiceAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelServiceAPI) EXPECT() *MockModelServiceAPIMockRecorder {
	return m.recorder
}

// GenerateContentStream mocks base method.
func (m *MockModelServiceAPI) GenerateContentStream(ctx context.Context, model string, contents []*genai.Content, config *genai.GenerateContentConfig) iter.Seq2[*genai.GenerateContentResponse, error] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateContentStream", ctx, model, contents, config)
	ret0, _ := ret[0].(iter.Seq2[*genai.GenerateContentResponse, error])
	return ret0
}

// GenerateContentStream indicates an expected call of GenerateContentStream.
func (mr *MockModelServiceAPIMockRecorder) GenerateContentStream(ctx, model, contents, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateContentStream", reflect.TypeOf((*MockModelServiceAPI)(nil).GenerateContentStream), ctx, model, contents, config)
}

// List mocks base method.
func (m *MockModelServiceAPI) List(ctx context.Context, cfg *genai.ListModelsConfig) (genai.Page[genai.Model], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, cfg)
	ret0, _ := ret[0].(genai.Page[genai.Model])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockModelServiceAPIMockRecorder) List(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockModelServiceAPI)(nil).List), ctx, cfg)
}

// MockFileServiceAPI is a mock of FileServiceAPI interface.
type MockFileServiceAPI struct {
	ctrl     *gomock.Controller
	recorder *MockFileServiceAPIMockRecorder
	isgomock struct{}
}

// MockFileServiceAPIMockRecorder is the mock recorder for MockFileServiceAPI.
type MockFileServiceAPIMockRecorder struct {
	mock *MockFileServiceAPI
}

// NewMockFileServiceAPI creates a new mock instance.
func NewMockFileServiceAPI(ctrl *gomock.Controller) *MockFileServiceAPI {
	mock := &MockFileServiceAPI{ctrl: ctrl}
	mock.recorder = &MockFileServiceAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileServiceAPI) EXPECT() *MockFileServiceAPIMockRecorder {
	return m.recorder
}

// Upload mocks base method.
func (m *MockFileServiceAPI) Upload(ctx context.Context, r io.Reader, config *genai.UploadFileConfig) (*genai.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, r, config)
	ret0, _ := ret[0].(*genai.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockFileServiceAPIMockRecorder) Upload(ctx, r, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockFileServiceAPI)(nil).Upload), ctx, r, config)
}

// MockGeminiClientAPI is a mock of GeminiClientAPI interface.
type MockGeminiClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockGeminiClientAPIMockRecorder
	isgomock struct{}
}

// MockGeminiClientAPIMockRecorder is the mock recorder for MockGeminiClientAPI.
type MockGeminiClientAPIMockRecorder struct {
	mock *MockGeminiClientAPI
}

// NewMockGeminiClientAPI creates a new mock instance.
func NewMockGeminiClientAPI(ctrl *gomock.Controller) *MockGeminiClientAPI {
	mock := &MockGeminiClientAPI{ctrl: ctrl}
	mock.recorder = &MockGeminiClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGeminiClientAPI) EXPECT() *MockGeminiClientAPIMockRecorder {
	return m.recorder
}

// ChatCreate mocks base method.
func (m *MockGeminiClientAPI) ChatCreate() ChatCreateServiceAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatCreate")
	ret0, _ := ret[0].(ChatCreateServiceAPI)
	return ret0
}

// ChatCreate indicates an expected call of ChatCreate.
func (mr *MockGeminiClientAPIMockRecorder) ChatCreate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatCreate", reflect.TypeOf((*MockGeminiClientAPI)(nil).ChatCreate))
}

// Files mocks base method.
func (m *MockGeminiClientAPI) Files() FileServiceAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Files")
	ret0, _ := ret[0].(FileServiceAPI)
	return ret0
}

// Files indicates an expected call of Files.
func (mr *MockGeminiClientAPIMockRecorder) Files() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Files", reflect.TypeOf((*MockGeminiClientAPI)(nil).Files))
}

// Models mocks base method.
func (m *MockGeminiClientAPI) Models() ModelServiceAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Models")
	ret0, _ := ret[0].(ModelServiceAPI)
	return ret0
}

// Models indicates an expected call of Models.
func (mr *MockGeminiClientAPIMockRecorder) Models() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Models", reflect.TypeOf((*MockGeminiClientAPI)(nil).Models))
}
